local NetMgr = {}
local invoke_list = {}

local INVOKE_TYPE = {}
INVOKE_TYPE.DELAY 	= 1
INVOKE_TYPE.REPEAT 	= 2

local socket = require "socket"
local proto = require "proto"
local sproto = require "sproto"

local host = sproto.new(proto.s2c):host "package"
local request = host:attach(sproto.new(proto.c2s))

local fd

local MsgFunc = require( "MsgProcess" )

local function send_package(fd, pack)
	local package = string.pack(">s2", pack)
	fd:send(package)
end

local function unpack_package(text)
	local size = #text
	if size < 2 then
		return nil, text
	end
	local s = text:byte(1) * 256 + text:byte(2)
	if size < s+2 then
		return nil, text
	end

	return text:sub(3,2+s), text:sub(3+s)
end

local function recv_package(last)
	local result
	result, last = unpack_package(last)
	if result then
		return result, last
	end
	local s, status, partial = fd:receive(4096)
	local r = s or partial
	if not r or (r == "")then
		return nil, last
	end
	return unpack_package(last .. r)
end

local session = 0

local cacheSessions = {}
local function send_request(name, args)
	session = session + 1
	local str = request(name, args, session)
	send_package(fd, str)
	-- print("Request:", session)
	cacheSessions[session] = name
end

local last = ""

local function process_request(name, args)
	local func = MsgFunc[name]
	if not func then
		return
	end
	func(args)
end

local function process_response(session, args)
	local name = cacheSessions[session]
	if not name then
		print("ERROR SESSION")
		return
	end
	local func = MsgFunc[name]
	if not func then
		print("NO FUNC FOUND FOR MSG:", name)
		return
	end
	func(args)
	cacheSessions[session] = nil
end

local function process_package(t, ...)
	if t == "REQUEST" then
		process_request(...)
	else
		assert(t == "RESPONSE")
		process_response(...)
	end
end

--注册回调
function NetMgr.regist(func, time, type)
	local func_data = {func = func, time = time, type = type or INVOKE_TYPE.DELAY, curTime = 0}
	invoke_list[func_data] = func_data
end

function NetMgr.doInvoke()
	for k, v in pairs( invoke_list ) do
		if v.type == INVOKE_TYPE.DELAY then
			v.time = v.time - CS.UnityEngine.Time.deltaTime
			if v.time <= 0 then
				v.func()
				invoke_list[k] = nil
			end
		else
			v.curTime = v.curTime + CS.UnityEngine.Time.deltaTime
			if v.curTime >= v.time then
				v.func()
				v.curTime = 0
			end
		end
	end
end

local Text_NetState
function connectCallBack()
	local result, err = fd:connect(SERVER_IP, SERVER_PORT)
	if result == 1.0 then
		print("AAAAAAAAAAAAAAAAA", "已连接")
	elseif err == "already connected" then
		print("AAAAAAAAAAAAAAAAA", "已连接")
	elseif err == "timeout" then
		print("AAAAAAAAAAAAAAAAA", "连接超时")
	elseif err == "Operation already in progress" then
		print("AAAAAAAAAAAAAAAAA", "连接中")
	end
end

function NetMgr.dispatch_package()
	if not fd then
		return
	end
	while true do
		local v
		v, last = recv_package(last)
		if not v then
			break
		end

		process_package(host:dispatch(v))
	end

end

function NetMgr.upate()
	NetMgr.dispatch_package()
	NetMgr.doInvoke()
end

function NetMgr.connect()
	fd = socket.tcp()
	fd:settimeout(0)
	fd:connect(SERVER_IP, SERVER_PORT)
	NetMgr.regist(connectCallBack, 1, INVOKE_TYPE.DELAY)	
end

function NetMgr.disconnect()
	if fd then
    	fd:close()
    end
end

return NetMgr
