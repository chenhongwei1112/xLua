local socket = require "socket"
local proto = require "proto"
local sproto = require "sproto"
local crypt = require "crypt"
local MsgFunc = require( "MsgProcess" )

local host = sproto.new(proto.s2c):host "package"
local request = host:attach(sproto.new(proto.c2s))

local curObj
local fd
local logined
local connected
local unpack_func
local session
local cacheSessions
local last
local curServerIP, curServerPort

local function unpack_line(text)
	local from = text:find("\n", 1, true)
	if from then
		return text:sub(1, from-1), text:sub(from+1)
	end
	return nil, text
end

local function unpack_package(text)
	local size = #text
	if size < 2 then
		return nil, text
	end
	local s = text:byte(1) * 256 + text:byte(2)
	if size < s+2 then
		return nil, text
	end

	return text:sub(3,2+s), text:sub(3+s)
end

local function reset()
	if fd then
		fd:close()
		fd = nil
	end

	logined = false
	connected = false
	session = 0
	last = ""
	curServerIP 	= LOGIN_SERVER_IP
	curServerPort 	= LOGIN_SERVER_PORT

    unpack_func = unpack_line
    cacheSessions = {}
end

local function recv_package(last)
	local result
	result, last = unpack_func(last)
	if result then
		return result, last
	end
	local s, status, partial = fd:receive(4096)
	local r = s or partial
	if not r or (r == "")then
		return nil, last
	end
	return unpack_func(last .. r)
end

local function send_package(fd, pack)
	local package = string.pack(">s2", pack)
	fd:send(package)
end

local function send_request(name, args)
	session = session + 1
	local v = request(name, args, session)
	local size = #v + 4
	local package = string.pack(">I2", size)..v..string.pack(">I4", session)
	fd:send(package)
	cacheSessions[session] = name
end

local function send_msg(v, session)
	local size = #v + 4
	local package = string.pack(">I2", size)..v..string.pack(">I4", session)
	fd:send(package)
	return v, session
end

local function process_request(name, args)
	local func = MsgFunc[name]
	if not func then
		return
	end
	func(args)
end

local function process_response(session, args)
	local name = cacheSessions[session]
	if not name then
		print("ERROR SESSION")
		return
	end
	local func = MsgFunc[name]
	if not func then
		print("NO FUNC FOUND FOR MSG:", name)
		return
	end
	func(args)
	cacheSessions[session] = nil
end

local challenge, secret, result
local clientkey
local subid
local token

local function loginSuccCallBack()
	logined = true
	curServerIP 	= MSG_SERVER_IP
	curServerPort 	= MSG_SERVER_PORT
	unpack_func = unpack_package
	curObj:reconnect()
end

local function loginFailCallBack()
	reset()
end

local function processLogin(t)
	if not challenge then
		challenge = crypt.base64decode(t)
		clientkey = crypt.randomkey()

		fd:send(crypt.base64encode(crypt.dhexchange(clientkey)).."\n")
	elseif not secret then
		secret = crypt.dhsecret(crypt.base64decode(t), clientkey)

		local hmac = crypt.hmac64(challenge, secret)
		fd:send(crypt.base64encode(hmac).."\n")

		token = {
			server = "sample",
			user = "hello",
			pass = "password",
		}

		local function encode_token(token)
			return string.format("%s@%s:%s",
				crypt.base64encode(token.user),
				crypt.base64encode(token.server),
				crypt.base64encode(token.pass))
		end

		local etoken = crypt.desencode(secret, encode_token(token))
		local b = crypt.base64encode(etoken)
		fd:send(crypt.base64encode(etoken).."\n")
	elseif not result then
		result = t

		local code = string.sub(result, 1, 3)
		if code == "200" then
			print("登录成功")
			subid = crypt.base64decode(string.sub(result, 5))
			loginSuccCallBack()
			return true
		elseif code == "401" then 
			print("登录失败：权限验证失败")
			loginFailCallBack()
			return false
		elseif code == "403" then 
			print("登录失败：禁止登录")
			loginFailCallBack()
			print("fffffffffffffffff", fd)
			return false
		elseif code == "406" then 
			print("登录中")
			loginFailCallBack()
			return false
		end
	end
end

local function processConnect(t)
	if t == "200 OK" then
		print("connect to msgserver")
		connected = true
	else
		print("400 Bad Request")
		reset()
	end
end

local function processPackage(t, ...)
	if t == "REQUEST" then
		process_request(...)
	else
		assert(t == "RESPONSE")
		process_response(...)
	end
end

local function connectCallBack()
	if not fd then
		return
	end

	local result, err = fd:connect(curServerIP, curServerPort)
	if result == 1.0 then
		ObjMgr.getUI("TestUI"):changeStateText("已连接")
	elseif err == "already connected" then
		ObjMgr.getUI("TestUI"):changeStateText("已连接")
	elseif err == "timeout" then
		ObjMgr.getUI("TestUI"):changeStateText("连接超时")
	elseif err == "Operation already in progress" then
		ObjMgr.getUI("TestUI"):changeStateText("连接中")
	end
end

local function dispatch_package()
	if not fd then
		return
	end

	while true do
		local v
		v, last = recv_package(last)
		if not v then
			break
		end

		if not logined then
			processLogin(v)
			break
		elseif not connected then
			processConnect(v)
			break	
		else
			local session = string.unpack(">I4", v, -4)
			v = v:sub(1,-5)
			processPackage(host:dispatch(v))
		end
	end
end


-----------------------------------------------------------
local XYObj = require( "XYObj" )
local CurObj = class("NetMgr", XYObj)

function CurObj:ctor()
    CurObj.super.ctor(self, "NetMgr")
    reset()
end

function CurObj:update()
	CurObj.super.update(self)
	dispatch_package()
end

local text = "echo"
local index = 1

function CurObj:reconnect(...)
	fd = socket.tcp()
	fd:settimeout(0)
	fd:connect(curServerIP, curServerPort)
	unpack_func = unpack_package
	last = ""

	self:invoke(function ( ... )
		if not fd then
			return
		end

		local handshake = string.format("%s@%s#%s:%d", crypt.base64encode(token.user), crypt.base64encode(token.server),crypt.base64encode(subid) , index)
		local hmac = crypt.hmac64(crypt.hashkey(handshake), secret)
		send_package(fd, handshake .. ":" .. crypt.base64encode(hmac))
		index = index + 1
	end, 0.2, INVOKE_TYPE.DELAY)
end

function CurObj:send_test(...)
	send_request(...)
end

function CurObj:disconnect()
	if fd then
    	fd:close()
    	fd = nil
    	unpack_func = unpack_line
    	connected = false
    end
end

function CurObj:connect()
	fd = socket.tcp()
	fd:settimeout(0)
	fd:connect(curServerIP, curServerPort)
	self:invoke(connectCallBack, 0.2, INVOKE_TYPE.DELAY)	
end

function CurObj:ondestroy()
	self:disconnect()	
end
------------------------------c#中的回调-------------------------------------------------
function start()
	curObj = CurObj.new() 
	curObj:registui()
	_G.NetMgr = curObj
end

function update()
	curObj:update()
end

function ondestroy()
	curObj:ondestroy()
end

